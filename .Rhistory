install_github("jrs95/nlmr")
library(devtools)
install_github("jrs95/nlmr")
devtools::install_github("jrs95/nlmr")
read.dcf(system.file("DESCRIPTION", package = "highcharter"))
devtools::install_github("r-lib/remotes", ref = "e56a41e1d0cad55cbe7d60b274b99ab7b7a76b5c")
install_github("jrs95/nlmr")
devtools::install_github("r-lib/remotes@dedcc06")
library(devtools)
install_github("jrs95/nlmr")
install.packages(c("callr", "clipr", "dbplyr", "meta", "processx", "ps", "RcppArmadillo", "rlang", "RMySQL", "survival", "tinytex"))
install.packages(c("AER", "backports", "BH", "checkmate", "class", "codetools", "colorspace", "curl", "data.table", "git2r", "gplots", "Hmisc", "htmlTable", "httpuv", "httr", "jsonlite", "knitr", "markdown", "meta", "openssl", "pillar", "purrr", "quantreg", "RcppArmadillo", "RcppEigen", "readr", "readxl", "rio", "rlang", "rmarkdown", "rstudioapi", "survival", "TH.data", "tibble", "tinytex"), lib="C:/Program Files/R/R-3.5.1/library")
if(!require(installr)) {
install.packages("installr"); require(installr)} #load / install+load installr
# using the package:
updateR() # this will start the updating process of your R installation.  It will check for newer versions, and if one is available, will guide you through the decisions you'd need to make.
data<-as.data.frame(rep("Data",1000))
View(data)
names(data)<-c("Data")
data$Data<-data$Data+as.character(row.names(data))
data$Data<-data$Data+row.names(data)
data$Data<-cat(data$Data, "", row.names(data))
###
#Author: Amy Mason
# Purpose: generate simulatoion data from nlmr paper
# Date: Jan 2019
##
library(MASS)
install.packages("MASS")
install.packages("MASS")
data<-as.data.frame(rbinom(1000,2,0.3))
names(data)<-c("g")
data$u<-runif(1000,0,1)
data<-as.data.frame(rbinom(10000,2,0.3))
names(data)<-c("g")
data$u<-runif(1000,0,1)
data$error<-rexp(10000,1)
data<-as.data.frame(rbinom(10000,2,0.3))
names(data)<-c("g")
data$u<-runif(1000,0,1)
data$errorX<-rexp(10000,1)
data$errorY<-rnorm(10000,0,1)
install.packages("devtools")
library(devtools)
install_github("jrs95/nlmr")
set.seed(4743045)
data<-as.data.frame(rbinom(10000,2,0.3))
names(data)<-c("g")
data$u<-runif(1000,0,1)
data$errorX<-rexp(10000,1)
data$errorY<-rnorm(10000,0,1)
data$X<-2+0.25*data$g+data$u +data$errorX
beta1<-1.5
beta2<-0.5
data$linear.Y<-beta1*data$X+0.8*data$u+data$errorY
data$quadratic.Y<-beta1*(data$X)^2+beta2*data$X+0.8*data$u+data$errorY
data$sqrt.Y<-beta1*sqrt(data$X)+0.8*data$u+data$errorY
data$log.Y<-beta1*log(data$X)+0.8*data$u+data$errorY
data$threshold.Y<-beta1*data$X+0.8*data$u+data$errorY
set.seed(4743045)
data<-as.data.frame(rbinom(10000,2,0.3))
names(data)<-c("g")
data$u<-runif(1000,0,1)
data$errorX<-rexp(10000,1)
data$errorY<-rnorm(10000,0,1)
data$X<-2+0.25*data$g+data$u +data$errorX
beta1<-1.5
beta2<-0.5
data$linear.Y<-beta1*data$X+0.8*data$u+data$errorY
data$quadratic.Y<-beta1*(data$X)^2+beta2*data$X+0.8*data$u+data$errorY
data$sqrt.Y<-beta1*sqrt(data$X)+0.8*data$u+data$errorY
data$log.Y<-beta1*log(data$X)+0.8*data$u+data$errorY
data$threshold.Y<-beta1*data$X+0.8*data$u+data$errorY
set.seed(4743045)
data<-as.data.frame(rbinom(10000,2,0.3))
names(data)<-c("g")
data$u<-runif(1000,0,1)
data$errorX<-rexp(10000,1)
data$errorY<-rnorm(10000,0,1)
data$X<-2+0.25*data$g+data$u +data$errorX
beta1<-1.5
beta2<-0.5
data$linear.Y<-beta1*data$X+0.8*data$u+data$errorY
data$quadratic.Y<-beta1*(data$X)^2+beta2*data$X+0.8*data$u+data$errorY
data$sqrt.Y<-beta1*sqrt(data$X)+0.8*data$u+data$errorY
data$log.Y<-beta1*log(data$X)+0.8*data$u+data$errorY
data$threshold.Y<-beta1*data$X+0.8*data$u+data$errorY
source('~/Non-linear MR/Matt Arnold Code/nlme_summ_aes MA.r')
install.packages(c("matrixStats", "metafor"))
setwd("U:/My Documents/Code_review/Foley_2019/CodeReview1/")
#load test data & attach
dat = read.table("NEUexp_SCZout_MRdata.txt", sep=" ", header=TRUE, stringsAsFactors=FALSE)
attach(dat)
head(dat)
source('U:/My Documents/Non-linear MR/Matt Arnold Code/nlme_summ_aes MA.r')
dat$mean<-rexp(1, rate=2)
head(dat)
dat$mean<-rexp(rate=2)
dat$mean<-rexp(n=length(dat),rate=2)
dat$mean<-rexp(n=nrow(dat),rate=2)
head(dat)
plot(dat$mean)
hist(dat$mean)
frac_poly_summ_mr(BetaXG,BetaYG, seBetaXG, seBetaYG, data$mean)
source('U:/My Documents/Non-linear MR/Matt Arnold Code/nlmr_functions.r')
frac_poly_summ_mr(BetaXG,BetaYG, seBetaXG, seBetaYG, data$mean)
install.packages("rma.exact")
library(rma.exact)
require(methods)
require(parallel)
require(metafor)
require(ggplot2)
require(matrixStats)
require(survival)
source("nlmr_functions.r")
setwd("U:/My Documents/Non-linear MR/Matt Arnold Code")
source("nlmr_functions.r")
source("nlme_summ_aes MA.r")
dat$mean<-rexp(n=nrow(dat),rate=2)
# use function
frac_poly_summ_mr(BetaXG,BetaYG, seBetaXG, seBetaYG, data$mean)
frac_poly_summ_mr(BetaXG,BetaYG, seBetaXG, seBetaYG, dat$mean)
keep<-frac_poly_summ_mr(BetaXG,BetaYG, seBetaXG, seBetaYG, dat$mean)
names(keep)
keep
keep$p_tests
keep$model
keep<-frac_poly_summ_mr(BetaXG,BetaYG, seBetaXG, seBetaYG, dat$mean, fig=TRUE)
keep
keep<-frac_poly_summ_mr(BetaXG,BetaYG, seBetaXG, seBetaYG, dat$mean, fig=TRUE, d="both")
keep
keep$p_tests
keep$model
keep<-frac_poly_summ_mr(BetaXG,BetaYG, seBetaXG, seBetaYG, fig=TRUE, d="both")
keep<-frac_poly_summ_mr(BetaXG,BetaYG, seBetaXG, seBetaYG, dat$mean, fig=TRUE, d="both", powers=3)
keep
keep$powers
keep$model
names(keep)
keep$coefficients
keep$lace
keep$xcoef
keep$p_tests
frac_poly_summ_mr(BetaXG,BetaYG, seBetaXG, seBetaYG, dat$mean, fig=TRUE, d=1)
frac_poly_summ_mr(BetaXG,BetaYG, seBetaXG, seBetaYG, dat$mean, fig=TRUE, d=1, powers=c(-2,-1,0))
keep$powers
keep$p_tests
frac_poly_summ_mr(BetaXG,BetaYG, seBetaXG, seBetaYG, dat$mean, fig=TRUE, d="both", powers=c(-2,-1,0))
keep$model
keep$p_heterogeneity
keep$p_tests
keep$xcoef
