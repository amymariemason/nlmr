######
# Author: Amy Mason ; based heavily on code by Stephen Burgess
# Date: Oct 2017
# Goal: Perform GWAS on biobank stroke outcomes 
# Inputs: "AdiposityID_sampleset" sample file, empty of outcomes  - in same order as 500k HRConly_EurQCp .bgen file
# 
# Outputs: sample file with outcomes from stroke_pad_all_comb
######


# libraries and setup
#setwd("C://Users/am2609/Programs/GWAS_inprogress")
setwd("//me-filer1/home$/am2609/My Documents/Programs/GWAS_inprogress/Outputs")



# load adiposity ID sample list
library(readr)
sample_all = read.table("AdiposityID_sampleset", header = TRUE)
samplelink <- read_table2("~/Programs/GWAS_inprogress/BB_input/sampleID_map.txt")
age_sex <- read_csv("~/Stata_outcomes/age_sex.csv")


# load outcomes file and list outcomes of interest
outcomes <- read_csv("~/Stata_outcomes/dip_only.csv")
wanted_outcomes<-names(outcomes)[2:ncol(outcomes)]
#########
# create function that returns column of binary outcomes for whole 
#empty results files
output<-rep(NA, nrow(sample_all))
output<-as.data.frame(output)

extract_outcome<-function(sample_list, sample_id="ID_1", outcomefile, outcome, outcome_id="eid"){
  stopifnot(!is.null(outcomefile[,outcome]))
  stopifnot(!is.null(outcomefile[,outcome_id]))
  stopifnot(!is.null(sample_list[,sample_id]))
  events<-which(outcomefile[,outcome]=="1")
  cases = unique(outcomefile[events,][[outcome_id]])
  output_temp = ifelse(as.numeric(sample_list[2:nrow(sample_list),sample_id])%in%cases, "1", "0")
  NAevents<-which(is.na(outcomefile[,outcome]))
  missing = unique(outcomefile[NAevents,][[outcome_id]])
  output_temp = ifelse(as.numeric(sample_list[2:nrow(sample_list),sample_id])%in%missing, "NA", output_temp)
  output_temp<-as.data.frame(output_temp, stringsAsFactors = F)
  output_temp<-rbind("B", output_temp)
  names(output_temp)<-outcome
  return(output_temp)
}

# Apply this accross all 

allframes = lapply(wanted_outcomes,
                   function(x)extract_outcome(sample_list=sample_all, 
                                              sample_id="ID_1", 
                                              outcomefile=outcomes, 
                                              outcome=x, 
                                              outcome_id="n_eid"))
answer = do.call(cbind,allframes)

# check same row number and bind
assertthat::are_equal(nrow(sample_all),nrow(answer))

sample_out<- cbind(sample_all, answer)

#return to using UKBB ID's
sample_out[,1]<-sample_out[,2]

#check row order is same as original sample file
sample_out$id2<-1:nrow(sample_out)
assertthat::are_equal(sample_out$id, sample_out$id2)

#remove unneeded columns
sample_out<-sample_out[, !names(sample_out) %in% c("id", "exclude", "error_check","id2")]

# fix error with snptest not reading missing correctly
sample_out[1, "missing"]<-0


# ADD AGE/SEX

samplefile<-sample_out

# replace the UKbiobank IDs with Adiposity IDS
#sampleHRC contains two ID ('ID_1' and 'ID_2') fields which are identical. Replace the first one with the adiposity IDs 
samplefile$id <- 1:nrow(samplefile)
sample2<-merge(samplefile,samplelink , by.x="ID_1", by.y="UKB_sample_ID", all.x = TRUE)
#return to original order
sample2<-sample2[order(sample2$id),]
# replace ID_1
sample2[,"ID_1"]<-sample2$Adiposity_sample_ID
#remove unneeded columns
sample2<-sample2[, !names(sample2) %in% c("Adiposity_sample_ID", "BP_sample_ID")]


#### add age/sex/bmi
sample3<-merge(sample2, age_sex, by.x="ID_1", by.y="n_eid", all.x = TRUE, all.y=FALSE)
assertthat::are_equal(nrow(sample3),nrow(samplefile))
sample3<-sample3[order(sample3$id),]

# add label for line

sample3[1,c("ages","sex", "bmi","agesq")] <-c("C", "D", "C","C")
sample_out<-sample3

#return to using UKBB ID's
sample_out[,1]<-sample_out[,2]

#check row order is same as original sample file
sample_out$id2<-1:nrow(sample_out)
assertthat::are_equal(sample_out$id, sample_out$id2)

#remove unneeded columns
sample_out<-sample_out[, !names(sample_out) %in% c("id", "exclude", "error_check","id2")]

# save sample file
write.table(sample_out,"~/menopause/menopause.sample", row.names=FALSE, quote=FALSE)


